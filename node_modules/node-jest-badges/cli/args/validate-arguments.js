"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateArguments = void 0;
var fileSystem_constants_1 = require("../../constants/fileSystem.constants");
var chalk_1 = __importDefault(require("chalk"));
var fs_extra_1 = require("fs-extra");
var helpers_1 = require("yargs/helpers");
var yargs_1 = __importDefault(require("yargs/yargs"));
var validateArguments = function () {
    var argv = (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
        .scriptName('generateBadges')
        .usage(chalk_1.default.blueBright('$0 -c [coverageJsonSummaryPath] -o [outputPath]'))
        .epilogue('Generates badges from jest coverage report')
        .example('$0 -c ./coverage/coverage-summary.json -o ./badges', '')
        .describe('c', chalk_1.default.cyanBright('coverage file path'))
        .describe('o', chalk_1.default.cyanBright('output path'))
        .default('c', fileSystem_constants_1.defaultSummaryPath)
        .default('o', fileSystem_constants_1.defaultOutputDir)
        .check(function (args) {
        var coverageFileExists = (0, fs_extra_1.pathExistsSync)(args.c);
        if (!coverageFileExists) {
            throw new Error(chalk_1.default.bold.redBright("Errors:\n-c\t\tCoverage file ".concat(args.c, " doesn't exist\n")));
        }
        return true;
    }).argv;
    return {
        coverageSummaryPath: argv.c,
        outputPath: argv.o,
    };
};
exports.validateArguments = validateArguments;
